// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250203081525_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Component", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Armour")
                        .HasColumnType("int");

                    b.Property<Guid?>("BottomComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Connections")
                        .HasColumnType("int");

                    b.Property<Guid?>("LeftComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LifeSupport")
                        .HasColumnType("bit");

                    b.Property<int>("Mass")
                        .HasColumnType("int");

                    b.Property<int>("MaxPowerDraw")
                        .HasColumnType("int");

                    b.Property<int>("MinPowerDraw")
                        .HasColumnType("int");

                    b.Property<int>("PowerCouplings")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RightComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpaceShipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StructuralIntegrity")
                        .HasColumnType("int");

                    b.Property<Guid?>("TopComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BottomComponentId")
                        .IsUnique()
                        .HasFilter("[BottomComponentId] IS NOT NULL");

                    b.HasIndex("ComponentTypeId");

                    b.HasIndex("LeftComponentId")
                        .IsUnique()
                        .HasFilter("[LeftComponentId] IS NOT NULL");

                    b.HasIndex("RightComponentId")
                        .IsUnique()
                        .HasFilter("[RightComponentId] IS NOT NULL");

                    b.HasIndex("SpaceShipId");

                    b.HasIndex("TopComponentId")
                        .IsUnique()
                        .HasFilter("[TopComponentId] IS NOT NULL");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("Domain.Entities.ComponentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Armour")
                        .HasColumnType("int");

                    b.Property<bool>("LifeSupport")
                        .HasColumnType("bit");

                    b.Property<int>("Mass")
                        .HasColumnType("int");

                    b.Property<int>("MaxPowerDraw")
                        .HasColumnType("int");

                    b.Property<int>("MinPowerDraw")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StructuralIntegrity")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ComponentTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96ea7006-3195-4ebb-882a-1823858bb161"),
                            Armour = 10,
                            LifeSupport = false,
                            Mass = 1000,
                            MaxPowerDraw = 0,
                            MinPowerDraw = 0,
                            Name = "Keelster 1000",
                            Price = 12000.0,
                            ShortName = "K1000",
                            StructuralIntegrity = 100,
                            Type = "Keel"
                        },
                        new
                        {
                            Id = new Guid("a46766a0-0a4f-4314-a2b8-0af36163fec9"),
                            Armour = 2,
                            LifeSupport = true,
                            Mass = 200,
                            MaxPowerDraw = 1000,
                            MinPowerDraw = 10,
                            Name = "ThrustMaster Max",
                            Price = 5000.0,
                            ShortName = "T-Max",
                            StructuralIntegrity = 30,
                            Type = "Engine"
                        },
                        new
                        {
                            Id = new Guid("06cea7a9-90ef-4cfe-be6d-fe6be63583d1"),
                            Armour = 1,
                            LifeSupport = true,
                            Mass = 250,
                            MaxPowerDraw = 1,
                            MinPowerDraw = 0,
                            Name = "PowerCore Fusion Pro",
                            Price = 7000.0,
                            ShortName = "PC-FP",
                            StructuralIntegrity = 10,
                            Type = "Reactor"
                        },
                        new
                        {
                            Id = new Guid("89abef19-f35d-4aa7-ba0d-fff02967069c"),
                            Armour = 2,
                            LifeSupport = false,
                            Mass = 50,
                            MaxPowerDraw = 100,
                            MinPowerDraw = 0,
                            Name = "Type 4 Beam Laser",
                            Price = 2000.0,
                            ShortName = "BL-4",
                            StructuralIntegrity = 20,
                            Type = "Weapon"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SpaceShip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("SpaceShips");
                });

            modelBuilder.Entity("Domain.Entities.Component", b =>
                {
                    b.HasOne("Domain.Entities.Component", "BottomComponent")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Component", "BottomComponentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.ComponentType", "ComponentType")
                        .WithMany()
                        .HasForeignKey("ComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Component", "LeftComponent")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Component", "LeftComponentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Component", "RightComponent")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Component", "RightComponentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.SpaceShip", "SpaceShip")
                        .WithMany("Components")
                        .HasForeignKey("SpaceShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Component", "TopComponent")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Component", "TopComponentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BottomComponent");

                    b.Navigation("ComponentType");

                    b.Navigation("LeftComponent");

                    b.Navigation("RightComponent");

                    b.Navigation("SpaceShip");

                    b.Navigation("TopComponent");
                });

            modelBuilder.Entity("Domain.Entities.SpaceShip", b =>
                {
                    b.Navigation("Components");
                });
#pragma warning restore 612, 618
        }
    }
}
